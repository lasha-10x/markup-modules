@use "variables";

// Responsive breakpoints
@mixin respond-to($breakpoint) {
  @if $breakpoint == sm {
    @media (min-width: variables.$breakpoint-sm) {
      @content;
    }
  }
  @if $breakpoint == md {
    @media (min-width: variables.$breakpoint-md) {
      @content;
    }
  }
  @if $breakpoint == lg {
    @media (min-width: variables.$breakpoint-lg) {
      @content;
    }
  }
  @if $breakpoint == xl {
    @media (min-width: variables.$breakpoint-xl) {
      @content;
    }
  }
  @if $breakpoint == 2xl {
    @media (min-width: $breakpoint-2xl) {
      @content;
    }
  }
}

// Flexbox utilities
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

// Container
@mixin container {
  max-width: $container-max-width;
  margin: 0 auto;
  padding: 0 $container-padding;
}

// Button styles
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: variables.$spacing-sm variables.$spacing-lg;
  border: none;
  border-radius: variables.$border-radius-md;
  font-family: variables.$font-primary;
  font-weight: variables.$font-weight-medium;
  text-decoration: none;
  cursor: pointer;
  transition: all variables.$transition-normal;
  
  &:focus {
    outline: 2px solid variables.$accent-color;
    outline-offset: 2px;
  }
}

@mixin button-primary {
  @include button-base;
  background-color: variables.$primary-color;
  color: white;
  
  &:hover {
    background-color: variables.$hover-color;
    transform: translateY(-2px);
    box-shadow: variables.$shadow-lg;
  }
}

@mixin button-secondary {
  @include button-base;
  background-color: transparent;
  color: variables.$primary-color;
  border: 2px solid variables.$primary-color;
  
  &:hover {
    background-color: variables.$primary-color;
    color: white;
  }
}

// Card styles
@mixin card {
  background-color: variables.$background-color;
  border-radius: variables.$border-radius-lg;
  box-shadow: variables.$shadow-md;
  overflow: hidden;
  transition: all variables.$transition-normal;
  
  &:hover {
    transform: translateY(-4px);
    box-shadow: variables.$shadow-xl;
  }
}

// Text utilities
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin text-clamp($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// Aspect ratio
@mixin aspect-ratio($width: 1, $height: 1) {
  position: relative;
  
  &::before {
    content: '';
    display: block;
    padding-top: percentage($height / $width);
  }
  
  > * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
}

// Grid utilities
@mixin grid($columns: 1, $gap: $spacing-lg) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
}

@mixin grid-responsive($mobile: 1, $tablet: 2, $desktop: 3, $gap: $spacing-lg) {
  @include grid($mobile, $gap);
  
  @include respond-to(md) {
    grid-template-columns: repeat($tablet, 1fr);
  }
  
  @include respond-to(lg) {
    grid-template-columns: repeat($desktop, 1fr);
  }
}

// Absolute positioning
@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin absolute-cover {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}